DB연동

-- 1 day --
1. 실습 준비
    1. db설치 및 실행중

    2. python 개발 환경 구축
        anaconda 설치
        접속 db에 종속적인 driver 설치(*)
            db별로 다름
            db벤더사가 제공

    3. pyhon 코드로 db 연동 확인



2. 설치 명령어
    * cx_Oracle 이라는 이름(모듈 또는 package)

    1. python 연동 oracle driver 설치 여부 확인
        >pip list   or       >conda list 

    2. 설치
        >pip install cx_Oracle  or
        >conda install cx_Oracle


3. python기반의 db연동 개발 단계
    1단계 : oracle 접속
        db의 ip / id / pw / 개별DB별 별칭(database service name(dns)) / port
        로컬 시스템에서 축약된 표현 : id/pw/dns
            SCOTT/TIGER/XE
            hr/hr/XE
    
    2단계 
        접속된 db에 sql문장 실행

    3단계
        실행된 sql문장 결과값을 활용

    4단계
        사용했던 자원들 반납(개발자가 반납 하는 로직 생략 불가)
        
        모든 user들이 기본적으로 지켜야 할 메너(로그아웃 필수)
        자원 반납 안 할 경우엔 사용 안 하는 db접속 기능의 객체들이 쓰레기인 상태로 메모리에 잔존
        시스템 자원 절약 측면에서 불필요한 리소스 낭비


4. python 특징
    python 내부적으로 모든 타입을 객체 타입으로 관리
    객체 - 데이터와 기능을 보유한 구조
           대표적인 예시   
                학사 관리 프로그램
                    교수/학생/행정직 ...다양한 서비스 로직 존제
                    어떤 교수가 무슨 과목을 몇명의 학생들에게..
                    어떤 학생이 몇명의 교수로 부터 몇개의 과목을 수강?...

                    학생의 정보 관리
                        class Student:
                            def __init__(self, 이름, 학번, 학년):
                                ...

                        class 교수:
                            def __init__(self, 이름, 나이, 과목):
                                ...                             


5. 실습 확장 단계
    DDL & CRUD 로직별로 함수 별도로 구현
    C : insert / R : select / U : update / D : delete


6. 고려시 개발 사항
    driver 로딩 - import 문장

    connection 객체 생성 - 다수의 user 가 공유 금지 
    sql문장 실행 가능한 cursor 생성
    sql문장 실행
    데이터 활용
    자원반환 - skip 불가 

    - 함수와 독립적으로 개별 구현 가능한 로직
    (모든 함수가 공유하게 할 만한 로직?)

7. dept table: deptno는 절대 중복 불허
    # 8번 : 반재광/ 15번 : 이유경 / 16번 : 이재선 / 26번 : 정주영A      
    
    1. crud 로직만 구현
    2. step05_dept_crud.py
        예외처리를 꼼꼼하게 구현 


-- 2day --
1. 실습 단계
    1단계. crud 구현된 함수는 별도의 모듈로 개발 & crud 모듈을 사용하는 또다른 파일 개발
        두개 이상의 py 파일 생성 
        예시
            서점 사이트
                책정보(Book 클래스 book_info.py)
                    제목 / 저자 / 출판사 / 가격
                    각각 데이터들을 가공 하는 메소드
                츨판사 정보
                ..
                고객정보...
    
    2단계. oracle 기반의 존재하는 table의 데이터값을 명확하게 구분하면서 사용 가능한 구조의 클래스 
        클래스 -> 데이터로 메모리에 저장(객체 생성, instance) 가능한 객체 생성 
        -> 다수의 row값들 활용시에는 다수의 객체 생성

        예시 : 버튼 클릭시에 모든 고객 정보 보는 화면 구성해줘!!
            버튼 : html

            클릭시에 서버에 요청 : java script & 비동기 메카니즘 적용 구현예정
                버튼 클릭의 동작으로 서버에 실제 요청 전송

            서버 관점 에서 요청 & 응답 받음 : python 기반의 http 통신 처리 기술인 flask
                Rset API & Swagger doc(개발한 소스들 사용 메뉴얼을 브라우저에 설명서 제공 & 사용 방법 & 시연화면)

            python & sql DB연동 

    3단계. MVC pattern
        - 정형화된 모든 프로그램 즉 언어 구분없이 권장하는 구조
        - 코드의 분업 구조(안 쓰이는 곳이 없음)
        - MVC 에서 파생된 새로운 구조들 다수
        - 가독성이 떨어짐 방지/유지보수를 원할히 하기 위한 필수 스펙
        - 참고
            대기업/중견기업 등 사내 framework(표준화된 솔류션, 강제성있는 동일한 구조들)
            python 기반의 django framework
            java 기반의 spring framework


2. MVC pattern 
    1. M - model
            서비스 로직의 핵심 기능/business logic/biz logic/Core 
            실제 데이터를 조작하는 기능 주 기능
            구현단계 : db와 실제 소통하는 part ...
            band end 단
            - python/java/c# ...

    2. V - view
            화면 담당/presentation logic

            front end
            - html/css/java script 

    3. C - Cotroller    
            View로 부터 요청 받아서 Model에게 업무 수행 처리 실행 시키는 중재자, 조절자 기능의 로직

3. IT언어
    1. Value Object[VO] = Data Transfer Object[DTO]
    - value object pattern / dto pattern이라 표현
        데이터를 표현하는 구조의 클래스
        Model 핵심 로직에서 생성해서 View인 화면 출력 로직에게 client에게 출력하겠금 전송하게 되는 구조

    2. DAO[디에이오, 다오]
        - Data Access Object의 약어
        - sql문장을 활용하면서 실제 DB와 소통을 전담하는 로직의 클래스 의미
        