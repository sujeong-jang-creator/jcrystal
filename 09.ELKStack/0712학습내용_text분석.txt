# 텍스트 분석 : analyze API 학습 


# text 라는 속성에 부여된 데이터값을 whitespce 기준으로 분리
# 분리된 term을 소문자 -> 불푱어제거 -> ~s, ~ing등이 포함된 문구로 검색해도 검색되게 해주는 작업(text 분석)

# 분석기 이해를 위한 test 코드 
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop",
    "snowball"
  ]
}

# 여백을 기준으로 나뉘어진 term 들을 모두다 소문자로 변환
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase"
  ]
}

# 불용어(Stop word)는 분석에 큰 의미가 없는 단어를 지칭
# The는 불용어로 간주하지 않음
# the는 불용어로 간주 
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "stop"
  ]
}

# The Tutorials 작업시 The 는 불용어 처리 안 되었음
# the Tutorials 작업시 the는 불용어로 간주 
GET _analyze
{
  "text": "The Articles and The Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "stop"
  ]
}

# 순서에 따라 불용어 처리도 고려해야 하는 예민함 보유 
# 불용어 제거 -> 소문자로 변환 
GET _analyze
{
  "text": "The Articles and The Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "stop",
    "lowercase"
  ]
}

# 소문자로 변환 -> 불용어 제거 
GET _analyze
{
  "text": "The Articles and The Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop"
  ]
}

# 검색시 기본어로 변환되어 검색되는 기능 
# Articles -> Articl
# Tutorials -> Tutori
# practical -> practic
GET _analyze
{
  "text": "The Articles and The Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "snowball"
  ]
}

# index에 분석기 적용

# my_index라는게 존재할 경우 삭제 
DELETE my_index

# my_index 생성
# RDBMS 관점 : my_index라는 table에 message라는 컬럼 생성, 컬럼 타입은 문자열
# ES :  my_index라는 index에 message라는 field 생성, field 타입은 term기준으로 관리되는 문자열
PUT my_index
{
  "mappings": {
    "properties": {
      "message": {
        "type": "text",
        "analyzer": "snowball"
      }
    }
  }
}

# my_index 데이터 저장
# id가 1인 doc 새로 저장(생성)
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object" 
}

GET my_index/_search

# programming 이라는 단어로 해당 문서 검색
GET my_index/_search
{
  "query": {
    "match": {
      "message": "programming"
    }
  }
}


# parses로 검색 
GET my_index/_search
{
  "query": {
    "match": {
      "message": "parses"
    }
  }
}


# 사용자 정의 analyzer 개발하는 학습 
# 소문자, 불용어순 기준으로 개발

DELETE my_index


# my_index에서 사용될 분석기만 사용자 정의로 선언

# 소문자화 하는 분석기(my1)와 불용어 제거하는 분석기(my2) 개별 생성
# 분석기들을 index 생성시 적용 
# 예시 : 다수의 field가 존재할 경우 동일한 분석기를 사용(재사용) 해야 할 경우 권장하는 구조 
PUT my_index
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my1": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "lowercase"
            ]
          },
          "my2": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "stop"
            ]
          },
          "my3": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "snowball"
            ]
          }
        }
      }
    }
  }
}


# 데이터 검색
GET my_index/_search

# 구조 확인 
GET my_index/_mapping

# 실시간 데이터를 my_index에게 적용하면서 분석
# my_index에 실제 데이터 저장없이 임시 test 
# my_index가 보유한 사용자정의 분석기 실행 test
GET my_index/_analyze
{
  "analyzer": "my1",
  "text": [
    "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS"
  ]
}

# 저장된 doc 없음 
GET my_index/_search

GET my_index/_analyze
{
  "analyzer": "my2",
  "text": [
    "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS"
  ]
}

# my_index에 실 데이터 저장하는 문법 
# id가 1이면서 message field에 데이터 새로 저장 
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object" 
}

GET my_index/_search

# id값이 1인 데이터만 검색 
GET my_index/_doc/1

# snowball이 적용된 상태에서 parses로 검색시 parse가 존재할 경우 자동 검색
# 적용이 안되는 상태
# ? parses로 검색시에도 parse 즉 snowball이 적용되게 하기 위한 마무리 
# 기존 코드 수정(?)해서 성공 
GET my_index/_search
{
  "query": {
    "match": {
      "message": "parses"
    }
  }
}






