PUT movie_search/_doc/1
{
  "movieCd": "20173732",
  "movieNm": "살아남은 아이",
  "movieNmEn": "Last Child",
  "prdtYear": "2017",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": "드라마,가족",
  "repNationNm": "한국",
  "repGenreNm": "드라마",
  "directors": [
    {
      "peopleNm": "신동석"
    }
  ],
  "companies": []
}

PUT movie_search/_doc/2
{
  "movieCd": "20190901",
  "movieNm": "나쁜 녀석들",
  "movieNmEn": "bad nums",
  "prdtYear": "2019",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": "영화,조폭",
  "repNationNm": "한국",
  "repGenreNm": "영화",
  "directors": [
    {
      "peopleNm": "마동석"
    }
  ],
  "companies": []
}


PUT movie_search/_doc/3
{
  "movieCd": "20190601",
  "movieNm": "기생충",
  "movieNmEn": "parasite",
  "prdtYear": "2018",
  "openDt": "2019",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": "영화,사회,가족",
  "repNationNm": "한국",
  "repGenreNm": "영화",
  "directors": [
    {
      "peopleNm": "송강호"
    }
  ],
  "companies": []
}


PUT movie_search/_doc/4
{
  "movieCd": "20180789",
  "movieNm": "한 솔로: 스타워즈 스토리",
  "movieNmEn": "Solo: A Star Wars Story",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "미국",
  "genreAlt": "",
  "repNationNm": "미국",
  "repGenreNm": "",
  "directors": [
    {
      "peopleNm": "론 하워드"
    }
  ],
  "companys": []
}



PUT movie_search/_doc/5
{
  "movieCd": "20177478",
  "movieNm": "어벤져스: 인피니티 워",
  "movieNmEn": "Avengers: Infinity War",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "개봉예정",
  "nationAlt": "미국",
  "genreAlt": [
    "액션",
    "어드벤처",
    "판타지",
    "SF"
  ],
  "repNationNm": "미국",
  "repGenreNm": "액션",
  "directors": [
    {
      "peopleNm": "안소니 루소"
    },
    {
      "peopleNm": "조 루소"
    }
  ],
  "companys": []
}

PUT movie_search/_doc/6
{
  "movieCd": "20176848",
  "movieNm": "데드풀2",
  "movieNmEn": "DEADPOOL2",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "개봉예정",
  "nationAlt": "미국",
  "genreAlt": [
    "액션",
    "어드벤처",
    "코미디",
    "SF"
  ],
  "repNationNm": "미국",
  "repGenreNm": "액션",
  "directors": [
    {
      "peopleNm": "데이빗 레이치"
    }
  ],
  "companys": []
}

PUT movie_search/_doc/7
{
  "movieCd": "20189661",
  "movieNm": "2018 한국영화아카데미 34기 졸업영화제 섹션A",
  "movieNmEn": "",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "옴니버스",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "기타"
  ],
  "repNationNm": "한국",
  "repGenreNm": "기타",
  "directors": [],
  "companys": []
}


PUT movie_search/_doc/8
{
  "movieCd": "20180482",
  "movieNm": "잊혀진 이야기\t",
  "movieNmEn": "Forgotten Saga",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "옴니버스",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "기타"
  ],
  "repNationNm": "한국",
  "repGenreNm": "기타",
  "directors": [],
  "companys": []
}


PUT movie_search/_doc/9
{
  "movieCd": "20180566",
  "movieNm": "2월 수요단편극장- 김태용 감독 특별전",
  "movieNmEn": "",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "옴니버스",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "기타"
  ],
  "repNationNm": "한국",
  "repGenreNm": "기타",
  "directors": [
    {
      "peopleNm": "김태용"
    }
  ],
  "companys": []
}


PUT movie_search/_doc/10
{
  "movieCd": "20180501",
  "movieNm": "관계의 의미",
  "movieNmEn": "",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "옴니버스",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "기타"
  ],
  "repNationNm": "한국",
  "repGenreNm": "기타",
  "directors": [],
  "companys": []
}


PUT movie_search/_doc/11
{
  "movieCd": "20178395",
  "movieNm": "12 솔져스",
  "movieNmEn": "12 Strong",
  "prdtYear": "2018",
  "openDt": "20180131",
  "typeNm": "장편",
  "prdtStatNm": "개봉예정",
  "nationAlt": "미국",
  "genreAlt": [
    "액션",
    "드라마",
    "전쟁"
  ],
  "repNationNm": "미국",
  "repGenreNm": "액션",
  "directors": [
    {
      "peopleNm": "니콜라이 퓰시"
    }
  ],
  "companys": []
}


PUT movie_search/_doc/12
{
  "movieCd": "20137706",
  "movieNm": "패밀리",
  "movieNmEn": "Family",
  "prdtYear": "2012",
  "openDt": "",
  "typeNm": "단편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "드라마"
  ],
  "repNationNm": "한국",
  "repGenreNm": "드라마",
  "directors": [
    {
      "peopleNm": "정욱"
    }
  ],
  "companys": []
}



PUT movie_search/_doc/13
{
  "movieCd": "20155408",
  "movieNm": "가족",
  "movieNmEn": "Family",
  "prdtYear": "2015",
  "openDt": "",
  "typeNm": "단편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "드라마"
  ],
  "repNationNm": "한국",
  "repGenreNm": "드라마",
  "directors": [
    {
      "peopleNm": "정승현"
    }
  ],
  "companys": []
}


PUT movie_search/_doc/14
{
  "movieCd": "20137027",
  "movieNm": "패밀리 ",
  "movieNmEn": "family",
  "prdtYear": "2011",
  "openDt": "",
  "typeNm": "단편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "애니메이션"
  ],
  "repNationNm": "한국",
  "repGenreNm": "애니메이션",
  "directors": [],
  "companys": []
}



PUT movie_search/_doc/15
{
  "movieCd": "20127686",
  "movieNm": "가족",
  "movieNmEn": "Family",
  "prdtYear": "1976",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "멜로",
    "로맨스"
  ],
  "repNationNm": "한국",
  "repGenreNm": "멜로/로맨스",
  "directors": [
    {
      "peopleNm": "이혁수"
    }
  ],
  "companys": [
    {
      "companyCd": "20101024",
      "companyNm": "대영영화주식회사"
    }
  ]
}


PUT movie_search/_doc/16
{
  "movieCd": "20138634",
  "movieNm": "Family",
  "movieNmEn": "Family",
  "prdtYear": "2012",
  "openDt": "",
  "typeNm": "단편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": "",
  "repNationNm": "한국",
  "repGenreNm": "",
  "directors": [],
  "companys": []
}

PUT movie_search/_doc/17
{
  "movieCd": "20174169",
  "movieNm": "기묘한 가족",
  "movieNmEn": "",
  "prdtYear": "2017",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "후반작업",
  "nationAlt": "한국",
  "genreAlt": [
    "코미디"
  ],
  "repNationNm": "한국",
  "repGenreNm": "코미디",
  "directors": [
    {
      "peopleNm": "이민재"
    }
  ],
  "companys": [
    {
      "companyCd": "20142551",
      "companyNm": "씨네주 유한회사"
    }
  ]
}


PUT movie_search/_doc/18
{
  "movieCd": "20020233",
  "movieNm": "패밀리",
  "movieNmEn": "Family",
  "prdtYear": "2002",
  "openDt": "20020822",
  "typeNm": "장편",
  "prdtStatNm": "개봉",
  "nationAlt": "한국",
  "genreAlt": [
    "코미디"
  ],
  "repNationNm": "한국",
  "repGenreNm": "코미디",
  "directors": [
    {
      "peopleNm": "최진원"
    }
  ],
  "companys": [
    {
      "companyCd": "20100217",
      "companyNm": "(주)배우마을"
    }
  ]
}

# mulit_match : 여러개의 field 대상으로 검색
GET movie_search/_search
{
  "query": {
    "multi_match": {
      "query": "가족",
      "fields": ["movieNm","movieNmEn"]
    }
  }
}

GET movie_search/_search
{
  "query": {
    "multi_match": {
      "query": "Family",
      "fields": ["movieNm","movieNmEn"]
    }
  }
}



# 대표 장르가 코미디, 제작 국가는 한국인 영화 중에 영화 타입이 단편을 제외한 doc 검색
GET movie_search/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "repGenreNm": {
              "value": "코미디"
            }
          }
        },
        {
          "match": {
            "repNationNm": "한국"
          }
        }
      ],
      "must_not": [
        {"match": {
          "typeNm": "단편"
        }}
      ]
    }
  }
}

GET movie_search/_search
{
  "query": {
    "prefix": {
      "movieNm": {
        "value": "살아남은"
      }
    }
  }
}

GET movie_search/_search
{
  "query": {
    "prefix": {
      "movieNm": {
        "value": "살"
      }
    }
  }
}

GET movie_search/_mapping

# openDt field 값만 검색
GET movie_search/_search
{
  "size": 20, 
  "_source": "openDt"
}

# null이 아닌 데이터만 검색
GET movie_search/_search
{
  "_source": "openDt",
  "query": {
    "exists": {
      "field": "openDt"
    }
  }
}


# * : 0~무한대, + : 1~무한대, ? : 없거나 하나이거나
# * : ES 0~무한대
# ? : es에선 철자 하나만을 의미



# wildcard(*) 를 활용한 검색
# 장르 구분해서 검색
# 장으로 시작하는 장르 데이터 검색
GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value": "장*"
      }
    }
  }
}

GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value": "장?"
      }
    }
  }
}

GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value": "장??"
      }
    }
  }
}


DELETE string_index
PUT string_index
{
  "mappings": {
    "properties": {
      "data1" : {
        "type": "text"
      },
      "data2" : {
        "type": "keyword"
      }
    }
  }
}
GET string_index/_mapping
POST string_index/_doc/1
{
  "data1":"pink red blue",
  "data2":"pink red blue"
}
GET string_index/_search
{
  "query": {
    "match": {
      "data1": "pink"
    }
  }
}
# keyword 타입으로 term 단위로 검색 시도시 검색 불가
GET string_index/_search
{
  "query": {
    "match": {
      "data2": "pink"
    }
  }
}
GET string_index/_search
{
  "query": {
    "match": {
      "data2": "pink red blue"
    }
  }
}


# text 라는 속성에 부여된 데이터값을 whitespace 기준으로 분리
# 분리된 term을 소문자 -> 불용어제거 -> ~s, ~ing등이 포함된 문구로 검색해도 검색되게 해주는 작업(text 분석)
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop",
    "snowball"
  ]
}


# 여백을 기준으로 나뉘어진 term 들을
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop",
    "snowball"
  ]
}

# 소문자로 변환 -> 불용어 제거
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop"
  ]
}

# 불용어 제거 -> 소문자로 변환
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "stop",
    "lowercase"
  ]
}

GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "snowball"
  ]
}

# my_index 데이터 저장
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object" 
}

GET my_index/_search


# 사용자 정의 analyzer 개발
# 소문자, 불용어순 기준으로 개발

DELETE my_index

# my_index에서 사용

# 소문자화 하는 분석기(my1)와 불용어 제거하는 분석기(my2) 개별 생성
# 분석기들을 index 생성시 적용 
# 예시 : 다수의 field가 존재할 경우 동일한 분석기를 사용(재사용) 해야 할 경우 권장하는 구조 
PUT my_index
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my1": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "lowercase"
            ]
          },
          "my2": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "stop"
            ]
          },
          "my3": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "snowball"
            ]
          }
        }
      }
    }
  }
}


# 데이터 검색
GET my_index/_search

# 구조 확인 
GET my_index/_mapping

# 실시간 데이터를 my_index에게 적용하면서 분석
# my_index가 보유한 사용자정의 분석기 실행 test
GET my_index/_analyze
{
  "analyzer": "my1",
  "text": [
    "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS"
  ]
}

# 저장된 doc 없음
GET my_index/_analyze
{
  "analyzer": "my2",
  "text": [
    "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS"
  ]
}



# my_index에 실 데이터 저장하는 문법
# id가 1이면서 message field에 데이터 새로 저장
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object"
}

GET my_index/_search

GET my_index/_doc/1

GET my_index/_search

# snowball이 적용된 상태에서 parses로 검색시 parse가 존재할 경우 자동 검색
# 적용이 안되는 상태
# parses로 검색시에도 parse 즉 snowball이 적용되게 하기 위한 마무리
# 기존 코드 수정(?) 해서라도

DELETE my_index

PUT my_index
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my1": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "lowercase"
            ]
          },
          "my2": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "stop"
            ]
          },
          "my3": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "snowball"
            ]
          }
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "message" : {
        "type" : "text",
        "analyzer": "my3"
      }
    }
  }
}

GET my_index/_mapping

GET my_index/_search

# 데이터 저장
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object"
}

# my_index가 보유한 모든 정보 검색
GET my_index/_search

# message field에 parse가 포함된 데이터(doc) 검색
GET my_index/_search
{
  "query": {
    "match": {
      "message": "parse"
    }
  }
}

GET my_index/_search
{
  "query": {
    "match": {
      "message": "parses"
    }
  }
}

# 집계 학습
PUT my_stations/_bulk
{"index": {"_id": "1"}}
{"date": "2020-06-01", "line": "1호선", "station": "종각", "passangers": 2314}
{"index": {"_id": "2"}}
{"date": "2020-06-01", "line": "2호선", "station": "강남", "passangers": 5412}
{"index": {"_id": "3"}}
{"date": "2020-07-10", "line": "2호선", "station": "강남", "passangers": 6221}
{"index": {"_id": "4"}}
{"date": "2020-07-15", "line": "2호선", "station": "강남", "passangers": 6478}
{"index": {"_id": "5"}}
{"date": "2020-08-07", "line": "2호선", "station": "강남", "passangers": 5821}
{"index": {"_id": "6"}}
{"date": "2020-08-18", "line": "2호선", "station": "강남", "passangers": 5724}
{"index": {"_id": "7"}}
{"date": "2020-09-02", "line": "2호선", "station": "신촌", "passangers": 3912}
{"index": {"_id": "8"}}
{"date": "2020-09-11", "line": "3호선", "station": "양재", "passangers": 4121}
{"index": {"_id": "9"}}
{"date": "2020-09-20", "line": "3호선", "station": "홍제", "passangers": 1021}
{"index": {"_id": "10"}}
{"date": "2020-10-01", "line": "3호선", "station": "불광", "passangers": 971}

GET my_stations/_mapping
GET my_stations/_search

# doc중에 id값이 2인 데이터만 검색 요청
GET my_stations/_doc/2

# 강남 이용객 합 집계
# 모든 강남 doc와 집계 결과가 검색되었음
GET my_stations/_search
{
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "aggs": {
    "sum_all": {
      "sum": {
        "field": "passangers"
      }
    }
  }
}

# 관련된 doc의 
GET my_stations/_search
{
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "size": 0, 
  "aggs": {
    "sum_all": {
      "sum": {
        "field": "passangers"
      }
    }
  }
}

GET my_stations/_search
{
  "size": 0,
   "aggs": {
    "p_s": {
      "stats": {
        "field": "passangers"
      }
    }
  }
}

#? 강남 이용객에 한해서만 기초 통계 집계 검색
GET my_stations/_search
{
  "size": 0, 
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "aggs": {
    "p_s": {
      "stats": {
        "field": "passangers"
      }
    }
  }
}

# 몇 호선까지 있는지 개수 카운팅
# 유니크한 데이터 검색시에는 term으로 구분되어 있는 데이터 값을 keyword로 간주해서 처리
# 1호선, 2호선, 3호선 즉 각각의 단어들이 중복으로 인지 되지 않게 태크처럼 인식된 구조
# unique_line : 이름은 자유롭게
# cardinality : 전체 행에 대한 특정 컬럼의 중복 수치를 나타내는 지표 또는 유니크한 데이터 개수 카운팅으로 사용되기도 함
GET my_stations/_search
{
  "size": 0,
  "aggs": {
    "unique_line": {
      "cardinality": {
        "field": "line.keyword"
      }
    }
  }
}

GET my_stations/_mapping

GET my_stations/_search
{
  "size": 0,
  "aggs": {
    "unique_line": {
      "cardinality": {
        "field": "station.keyword"
      }
    }
  }
}


# mission
GET bank/_search
{
  "size": 0,
  "aggs": {
    "bb": {
      "stats": {
        "field": "customers"
      }
    }
  }
}

GET bank/_search
{
  "size": 0,
  "query": {
    "match": {
      "bank": "국민은행"
    }
  },
  "aggs": {
    "bb": {
      "stats": {
        "field": "customers"
      }
    }
  }
}

GET bank/_search
{
  "size": 0,
  "aggs": {
    "unique_line": {
      "cardinality":{ 
        "field": "branch.keyword"
      }
    }
  }
}















































