학습내용

1. class 개발 방법 review
    - 설계도
2. 객체(Object, instance) 생성 및 활용 방법 review
    - 설계도인 class를 기반으로 해서 생성된 사용 가능한 데이터(변수)와 기능(메소드) 묶음

3. 모듈화 해서 사용

4. *.py라는 확장자 파일 실행시 개발 방법
    if__name__=='__main__':

5. jupyter notebook
    - 실시간 개발시에 빠른 확인 가능하게 해주는 tool
    - 실시간 print() 함수 사용 없이도 일정부분 출력
    - 실제 사용 가능한 소스는 *.py 로 개발 또는 머신/딥러닝 학습된 모델은 h5 파일로 생성해서 사용

6. 실습 예시
    - Book Shop 관리 application 개발
    - 서비스 받는 client = Bool shop 운영자 따라서 어떤 고객이 무슨책을 구매 했는지에 정보 확인...

    1. 정보 : 고객 / 책
    2. 관리자가 요청시 고객과 책 정보가 화면에 출력
        - 한 고객은 책 한권만 이라는 제한이 있다 가정
        - 요구사항 도출해서 설계 마무리
    3. 실제 개발 설계 
        경우의 수 1 : 고객 클래스 / 책 클래스 / 고객과 책에 대한 정보를 활용 가능하게 생성 및 서비스 클래스
        # 함수명에는 언더바(_)를 쓰지만 파일엔 언더바 비추천

        CustomerInfo.py
            Customer 클래스 개발 모듈(파일)
        BookInfo.py
            Book 클래스 개발 모듈
        Bookshop.py
            Customer와 Book 정보 저장 및 사용 모듈
        경우의 수 2 : 하나의 py 파일에 모든걸 개별 함수로만 개발

    4. 고려 사항
        1. 한번 구현 후에 지속적으로 사용을 위해서는 재사용성과 요구사항 변경시 쉽게 수정 가능한 유연성(확장성)이 좋은 구조로 개발
        고객은 1명~...100명
        책 1권.... 몇만권....

        2. 고객관리 프로그램
            회원가입(insert, creat) / 탈퇴(delete) / 수정(update) / 검색(id? age? name?) : select(질의, query)
            CRUD

            회원가입 후 로그인 로직을 구현해야 하는 상황
                경우의 수 1 : 회원가입 기능과 로그인 기능을 별도의 메소드로 개발
                    최적인 구조
                경우의 수 2 : 회원가임 로그인 기능을 하나의 메소드 개발 
                    단점 : 회원가입 하는 사람이 바로 로그인 한다는 보장이 없음. 구조는 비추
    
  7. 개발 형식
    1. 객체 지향 형식으로 개발을 할 경우의 권장 구조
        - python or java or java script등 흡사

    2. class명
        1. OOP 즉 객체 생성해서 로직 처리할 경우엔
            class명 _ 대소대소.py
                    (낙타체)

        2. 함수들로만 구성된 py 파일명
            소문자_소문자.py (뱀체)

---------------------------------------
step2 주제 : 학사 관리 프로그램 이라 가정
1. 데이터
    1. 학생, 선생님 매핑(1:1)
    2. 학생, 선생님 매핑(*:1)
2. file 입출력 review
    comma-separated values
        students.csv
            이름, 학년, 성별, 과목

    python 코드에서 file 내용을 read -> , 기준으로 데이터 구분
    * file로 부터read한 한 학새으 선생님에 대한 정보로 객체화 하려 함
    * 객체는 사용 가능하게 메모리에 생성된 구조를 의미
    